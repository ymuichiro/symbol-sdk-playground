"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretLockEntryDTOToJSON = exports.SecretLockEntryDTOFromJSONTyped = exports.SecretLockEntryDTOFromJSON = exports.instanceOfSecretLockEntryDTO = void 0;
const LockHashAlgorithmEnum_1 = require("./LockHashAlgorithmEnum");
const LockStatus_1 = require("./LockStatus");
/**
 * Check if a given object implements the SecretLockEntryDTO interface.
 */
function instanceOfSecretLockEntryDTO(value) {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "ownerAddress" in value;
    isInstance = isInstance && "mosaicId" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "endHeight" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "hashAlgorithm" in value;
    isInstance = isInstance && "secret" in value;
    isInstance = isInstance && "recipientAddress" in value;
    isInstance = isInstance && "compositeHash" in value;
    return isInstance;
}
exports.instanceOfSecretLockEntryDTO = instanceOfSecretLockEntryDTO;
function SecretLockEntryDTOFromJSON(json) {
    return SecretLockEntryDTOFromJSONTyped(json, false);
}
exports.SecretLockEntryDTOFromJSON = SecretLockEntryDTOFromJSON;
function SecretLockEntryDTOFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        version: json["version"],
        ownerAddress: json["ownerAddress"],
        mosaicId: json["mosaicId"],
        amount: json["amount"],
        endHeight: json["endHeight"],
        status: (0, LockStatus_1.LockStatusFromJSON)(json["status"]),
        hashAlgorithm: (0, LockHashAlgorithmEnum_1.LockHashAlgorithmEnumFromJSON)(json["hashAlgorithm"]),
        secret: json["secret"],
        recipientAddress: json["recipientAddress"],
        compositeHash: json["compositeHash"],
    };
}
exports.SecretLockEntryDTOFromJSONTyped = SecretLockEntryDTOFromJSONTyped;
function SecretLockEntryDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        version: value.version,
        ownerAddress: value.ownerAddress,
        mosaicId: value.mosaicId,
        amount: value.amount,
        endHeight: value.endHeight,
        status: (0, LockStatus_1.LockStatusToJSON)(value.status),
        hashAlgorithm: (0, LockHashAlgorithmEnum_1.LockHashAlgorithmEnumToJSON)(value.hashAlgorithm),
        secret: value.secret,
        recipientAddress: value.recipientAddress,
        compositeHash: value.compositeHash,
    };
}
exports.SecretLockEntryDTOToJSON = SecretLockEntryDTOToJSON;
