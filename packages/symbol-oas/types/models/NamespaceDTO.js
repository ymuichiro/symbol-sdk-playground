"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamespaceDTOToJSON = exports.NamespaceDTOFromJSONTyped = exports.NamespaceDTOFromJSON = exports.instanceOfNamespaceDTO = void 0;
const runtime_1 = require("../runtime");
const AliasDTO_1 = require("./AliasDTO");
const NamespaceRegistrationTypeEnum_1 = require("./NamespaceRegistrationTypeEnum");
/**
 * Check if a given object implements the NamespaceDTO interface.
 */
function instanceOfNamespaceDTO(value) {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "registrationType" in value;
    isInstance = isInstance && "depth" in value;
    isInstance = isInstance && "level0" in value;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "parentId" in value;
    isInstance = isInstance && "ownerAddress" in value;
    isInstance = isInstance && "startHeight" in value;
    isInstance = isInstance && "endHeight" in value;
    return isInstance;
}
exports.instanceOfNamespaceDTO = instanceOfNamespaceDTO;
function NamespaceDTOFromJSON(json) {
    return NamespaceDTOFromJSONTyped(json, false);
}
exports.NamespaceDTOFromJSON = NamespaceDTOFromJSON;
function NamespaceDTOFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        version: json["version"],
        registrationType: (0, NamespaceRegistrationTypeEnum_1.NamespaceRegistrationTypeEnumFromJSON)(json["registrationType"]),
        depth: json["depth"],
        level0: json["level0"],
        level1: !(0, runtime_1.exists)(json, "level1") ? undefined : json["level1"],
        level2: !(0, runtime_1.exists)(json, "level2") ? undefined : json["level2"],
        alias: (0, AliasDTO_1.AliasDTOFromJSON)(json["alias"]),
        parentId: json["parentId"],
        ownerAddress: json["ownerAddress"],
        startHeight: json["startHeight"],
        endHeight: json["endHeight"],
    };
}
exports.NamespaceDTOFromJSONTyped = NamespaceDTOFromJSONTyped;
function NamespaceDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        version: value.version,
        registrationType: (0, NamespaceRegistrationTypeEnum_1.NamespaceRegistrationTypeEnumToJSON)(value.registrationType),
        depth: value.depth,
        level0: value.level0,
        level1: value.level1,
        level2: value.level2,
        alias: (0, AliasDTO_1.AliasDTOToJSON)(value.alias),
        parentId: value.parentId,
        ownerAddress: value.ownerAddress,
        startHeight: value.startHeight,
        endHeight: value.endHeight,
    };
}
exports.NamespaceDTOToJSON = NamespaceDTOToJSON;
