"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionInfoDTOTransactionToJSON = exports.TransactionInfoDTOTransactionFromJSONTyped = exports.TransactionInfoDTOTransactionFromJSON = exports.instanceOfTransactionInfoDTOTransaction = void 0;
const runtime_1 = require("../runtime");
const AccountRestrictionFlagsEnum_1 = require("./AccountRestrictionFlagsEnum");
const AliasActionEnum_1 = require("./AliasActionEnum");
const CosignatureDTO_1 = require("./CosignatureDTO");
const EmbeddedTransactionInfoDTO_1 = require("./EmbeddedTransactionInfoDTO");
const LinkActionEnum_1 = require("./LinkActionEnum");
const LockHashAlgorithmEnum_1 = require("./LockHashAlgorithmEnum");
const MosaicRestrictionTypeEnum_1 = require("./MosaicRestrictionTypeEnum");
const MosaicSupplyChangeActionEnum_1 = require("./MosaicSupplyChangeActionEnum");
const NamespaceRegistrationTypeEnum_1 = require("./NamespaceRegistrationTypeEnum");
const NetworkTypeEnum_1 = require("./NetworkTypeEnum");
const TransactionTypeEnum_1 = require("./TransactionTypeEnum");
const UnresolvedMosaic_1 = require("./UnresolvedMosaic");
/**
 * Check if a given object implements the TransactionInfoDTOTransaction interface.
 */
function instanceOfTransactionInfoDTOTransaction(value) {
    let isInstance = true;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "signerPublicKey" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "network" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "maxFee" in value;
    isInstance = isInstance && "deadline" in value;
    isInstance = isInstance && "linkedPublicKey" in value;
    isInstance = isInstance && "linkAction" in value;
    isInstance = isInstance && "startEpoch" in value;
    isInstance = isInstance && "endEpoch" in value;
    isInstance = isInstance && "transactionsHash" in value;
    isInstance = isInstance && "cosignatures" in value;
    isInstance = isInstance && "transactions" in value;
    isInstance = isInstance && "mosaicId" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "hash" in value;
    isInstance = isInstance && "recipientAddress" in value;
    isInstance = isInstance && "secret" in value;
    isInstance = isInstance && "hashAlgorithm" in value;
    isInstance = isInstance && "proof" in value;
    isInstance = isInstance && "targetAddress" in value;
    isInstance = isInstance && "scopedMetadataKey" in value;
    isInstance = isInstance && "valueSizeDelta" in value;
    isInstance = isInstance && "valueSize" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "targetMosaicId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "flags" in value;
    isInstance = isInstance && "divisibility" in value;
    isInstance = isInstance && "delta" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "sourceAddress" in value;
    isInstance = isInstance && "registrationType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "namespaceId" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "aliasAction" in value;
    isInstance = isInstance && "minRemovalDelta" in value;
    isInstance = isInstance && "minApprovalDelta" in value;
    isInstance = isInstance && "addressAdditions" in value;
    isInstance = isInstance && "addressDeletions" in value;
    isInstance = isInstance && "restrictionFlags" in value;
    isInstance = isInstance && "restrictionAdditions" in value;
    isInstance = isInstance && "restrictionDeletions" in value;
    isInstance = isInstance && "referenceMosaicId" in value;
    isInstance = isInstance && "restrictionKey" in value;
    isInstance = isInstance && "previousRestrictionValue" in value;
    isInstance = isInstance && "newRestrictionValue" in value;
    isInstance = isInstance && "previousRestrictionType" in value;
    isInstance = isInstance && "newRestrictionType" in value;
    isInstance = isInstance && "mosaics" in value;
    return isInstance;
}
exports.instanceOfTransactionInfoDTOTransaction = instanceOfTransactionInfoDTOTransaction;
function TransactionInfoDTOTransactionFromJSON(json) {
    return TransactionInfoDTOTransactionFromJSONTyped(json, false);
}
exports.TransactionInfoDTOTransactionFromJSON = TransactionInfoDTOTransactionFromJSON;
function TransactionInfoDTOTransactionFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        size: json["size"],
        signature: json["signature"],
        signerPublicKey: json["signerPublicKey"],
        version: json["version"],
        network: (0, NetworkTypeEnum_1.NetworkTypeEnumFromJSON)(json["network"]),
        type: json["type"],
        maxFee: json["maxFee"],
        deadline: json["deadline"],
        linkedPublicKey: json["linkedPublicKey"],
        linkAction: (0, LinkActionEnum_1.LinkActionEnumFromJSON)(json["linkAction"]),
        startEpoch: json["startEpoch"],
        endEpoch: json["endEpoch"],
        transactionsHash: json["transactionsHash"],
        cosignatures: json["cosignatures"].map(CosignatureDTO_1.CosignatureDTOFromJSON),
        transactions: json["transactions"].map(EmbeddedTransactionInfoDTO_1.EmbeddedTransactionInfoDTOFromJSON),
        mosaicId: json["mosaicId"],
        amount: json["amount"],
        duration: json["duration"],
        hash: json["hash"],
        recipientAddress: json["recipientAddress"],
        secret: json["secret"],
        hashAlgorithm: (0, LockHashAlgorithmEnum_1.LockHashAlgorithmEnumFromJSON)(json["hashAlgorithm"]),
        proof: json["proof"],
        targetAddress: json["targetAddress"],
        scopedMetadataKey: json["scopedMetadataKey"],
        valueSizeDelta: json["valueSizeDelta"],
        valueSize: json["valueSize"],
        value: json["value"],
        targetMosaicId: json["targetMosaicId"],
        targetNamespaceId: !(0, runtime_1.exists)(json, "targetNamespaceId")
            ? undefined
            : json["targetNamespaceId"],
        id: json["id"],
        nonce: json["nonce"],
        flags: json["flags"],
        divisibility: json["divisibility"],
        delta: json["delta"],
        action: (0, MosaicSupplyChangeActionEnum_1.MosaicSupplyChangeActionEnumFromJSON)(json["action"]),
        sourceAddress: json["sourceAddress"],
        parentId: !(0, runtime_1.exists)(json, "parentId") ? undefined : json["parentId"],
        registrationType: (0, NamespaceRegistrationTypeEnum_1.NamespaceRegistrationTypeEnumFromJSON)(json["registrationType"]),
        name: json["name"],
        namespaceId: json["namespaceId"],
        address: json["address"],
        aliasAction: (0, AliasActionEnum_1.AliasActionEnumFromJSON)(json["aliasAction"]),
        minRemovalDelta: json["minRemovalDelta"],
        minApprovalDelta: json["minApprovalDelta"],
        addressAdditions: json["addressAdditions"],
        addressDeletions: json["addressDeletions"],
        restrictionFlags: (0, AccountRestrictionFlagsEnum_1.AccountRestrictionFlagsEnumFromJSON)(json["restrictionFlags"]),
        restrictionAdditions: json["restrictionAdditions"].map(TransactionTypeEnum_1.TransactionTypeEnumFromJSON),
        restrictionDeletions: json["restrictionDeletions"].map(TransactionTypeEnum_1.TransactionTypeEnumFromJSON),
        referenceMosaicId: json["referenceMosaicId"],
        restrictionKey: json["restrictionKey"],
        previousRestrictionValue: json["previousRestrictionValue"],
        newRestrictionValue: json["newRestrictionValue"],
        previousRestrictionType: (0, MosaicRestrictionTypeEnum_1.MosaicRestrictionTypeEnumFromJSON)(json["previousRestrictionType"]),
        newRestrictionType: (0, MosaicRestrictionTypeEnum_1.MosaicRestrictionTypeEnumFromJSON)(json["newRestrictionType"]),
        mosaics: json["mosaics"].map(UnresolvedMosaic_1.UnresolvedMosaicFromJSON),
        message: !(0, runtime_1.exists)(json, "message") ? undefined : json["message"],
    };
}
exports.TransactionInfoDTOTransactionFromJSONTyped = TransactionInfoDTOTransactionFromJSONTyped;
function TransactionInfoDTOTransactionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        size: value.size,
        signature: value.signature,
        signerPublicKey: value.signerPublicKey,
        version: value.version,
        network: (0, NetworkTypeEnum_1.NetworkTypeEnumToJSON)(value.network),
        type: value.type,
        maxFee: value.maxFee,
        deadline: value.deadline,
        linkedPublicKey: value.linkedPublicKey,
        linkAction: (0, LinkActionEnum_1.LinkActionEnumToJSON)(value.linkAction),
        startEpoch: value.startEpoch,
        endEpoch: value.endEpoch,
        transactionsHash: value.transactionsHash,
        cosignatures: value.cosignatures.map(CosignatureDTO_1.CosignatureDTOToJSON),
        transactions: value.transactions.map(EmbeddedTransactionInfoDTO_1.EmbeddedTransactionInfoDTOToJSON),
        mosaicId: value.mosaicId,
        amount: value.amount,
        duration: value.duration,
        hash: value.hash,
        recipientAddress: value.recipientAddress,
        secret: value.secret,
        hashAlgorithm: (0, LockHashAlgorithmEnum_1.LockHashAlgorithmEnumToJSON)(value.hashAlgorithm),
        proof: value.proof,
        targetAddress: value.targetAddress,
        scopedMetadataKey: value.scopedMetadataKey,
        valueSizeDelta: value.valueSizeDelta,
        valueSize: value.valueSize,
        value: value.value,
        targetMosaicId: value.targetMosaicId,
        targetNamespaceId: value.targetNamespaceId,
        id: value.id,
        nonce: value.nonce,
        flags: value.flags,
        divisibility: value.divisibility,
        delta: value.delta,
        action: (0, MosaicSupplyChangeActionEnum_1.MosaicSupplyChangeActionEnumToJSON)(value.action),
        sourceAddress: value.sourceAddress,
        parentId: value.parentId,
        registrationType: (0, NamespaceRegistrationTypeEnum_1.NamespaceRegistrationTypeEnumToJSON)(value.registrationType),
        name: value.name,
        namespaceId: value.namespaceId,
        address: value.address,
        aliasAction: (0, AliasActionEnum_1.AliasActionEnumToJSON)(value.aliasAction),
        minRemovalDelta: value.minRemovalDelta,
        minApprovalDelta: value.minApprovalDelta,
        addressAdditions: value.addressAdditions,
        addressDeletions: value.addressDeletions,
        restrictionFlags: (0, AccountRestrictionFlagsEnum_1.AccountRestrictionFlagsEnumToJSON)(value.restrictionFlags),
        restrictionAdditions: value.restrictionAdditions.map(TransactionTypeEnum_1.TransactionTypeEnumToJSON),
        restrictionDeletions: value.restrictionDeletions.map(TransactionTypeEnum_1.TransactionTypeEnumToJSON),
        referenceMosaicId: value.referenceMosaicId,
        restrictionKey: value.restrictionKey,
        previousRestrictionValue: value.previousRestrictionValue,
        newRestrictionValue: value.newRestrictionValue,
        previousRestrictionType: (0, MosaicRestrictionTypeEnum_1.MosaicRestrictionTypeEnumToJSON)(value.previousRestrictionType),
        newRestrictionType: (0, MosaicRestrictionTypeEnum_1.MosaicRestrictionTypeEnumToJSON)(value.newRestrictionType),
        mosaics: value.mosaics.map(UnresolvedMosaic_1.UnresolvedMosaicToJSON),
        message: value.message,
    };
}
exports.TransactionInfoDTOTransactionToJSON = TransactionInfoDTOTransactionToJSON;
