"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataEntryDTOToJSON = exports.MetadataEntryDTOFromJSONTyped = exports.MetadataEntryDTOFromJSON = exports.instanceOfMetadataEntryDTO = void 0;
const runtime_1 = require("../runtime");
const MetadataEntryDTOTargetId_1 = require("./MetadataEntryDTOTargetId");
const MetadataTypeEnum_1 = require("./MetadataTypeEnum");
/**
 * Check if a given object implements the MetadataEntryDTO interface.
 */
function instanceOfMetadataEntryDTO(value) {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "compositeHash" in value;
    isInstance = isInstance && "sourceAddress" in value;
    isInstance = isInstance && "targetAddress" in value;
    isInstance = isInstance && "scopedMetadataKey" in value;
    isInstance = isInstance && "metadataType" in value;
    isInstance = isInstance && "value" in value;
    return isInstance;
}
exports.instanceOfMetadataEntryDTO = instanceOfMetadataEntryDTO;
function MetadataEntryDTOFromJSON(json) {
    return MetadataEntryDTOFromJSONTyped(json, false);
}
exports.MetadataEntryDTOFromJSON = MetadataEntryDTOFromJSON;
function MetadataEntryDTOFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
        'compositeHash': json['compositeHash'],
        'sourceAddress': json['sourceAddress'],
        'targetAddress': json['targetAddress'],
        'scopedMetadataKey': json['scopedMetadataKey'],
        'targetId': !(0, runtime_1.exists)(json, 'targetId') ? undefined : (0, MetadataEntryDTOTargetId_1.MetadataEntryDTOTargetIdFromJSON)(json['targetId']),
        'metadataType': (0, MetadataTypeEnum_1.MetadataTypeEnumFromJSON)(json['metadataType']),
        'value': json['value'],
    };
}
exports.MetadataEntryDTOFromJSONTyped = MetadataEntryDTOFromJSONTyped;
function MetadataEntryDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
        'compositeHash': value.compositeHash,
        'sourceAddress': value.sourceAddress,
        'targetAddress': value.targetAddress,
        'scopedMetadataKey': value.scopedMetadataKey,
        'targetId': (0, MetadataEntryDTOTargetId_1.MetadataEntryDTOTargetIdToJSON)(value.targetId),
        'metadataType': (0, MetadataTypeEnum_1.MetadataTypeEnumToJSON)(value.metadataType),
        'value': value.value,
    };
}
exports.MetadataEntryDTOToJSON = MetadataEntryDTOToJSON;
