"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddedTransferTransactionDTOToJSON = exports.EmbeddedTransferTransactionDTOFromJSONTyped = exports.EmbeddedTransferTransactionDTOFromJSON = exports.instanceOfEmbeddedTransferTransactionDTO = void 0;
const runtime_1 = require("../runtime");
const NetworkTypeEnum_1 = require("./NetworkTypeEnum");
const UnresolvedMosaic_1 = require("./UnresolvedMosaic");
/**
 * Check if a given object implements the EmbeddedTransferTransactionDTO interface.
 */
function instanceOfEmbeddedTransferTransactionDTO(value) {
    let isInstance = true;
    isInstance = isInstance && "signerPublicKey" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "network" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "recipientAddress" in value;
    isInstance = isInstance && "mosaics" in value;
    return isInstance;
}
exports.instanceOfEmbeddedTransferTransactionDTO = instanceOfEmbeddedTransferTransactionDTO;
function EmbeddedTransferTransactionDTOFromJSON(json) {
    return EmbeddedTransferTransactionDTOFromJSONTyped(json, false);
}
exports.EmbeddedTransferTransactionDTOFromJSON = EmbeddedTransferTransactionDTOFromJSON;
function EmbeddedTransferTransactionDTOFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        signerPublicKey: json["signerPublicKey"],
        version: json["version"],
        network: (0, NetworkTypeEnum_1.NetworkTypeEnumFromJSON)(json["network"]),
        type: json["type"],
        recipientAddress: json["recipientAddress"],
        mosaics: json["mosaics"].map(UnresolvedMosaic_1.UnresolvedMosaicFromJSON),
        message: !(0, runtime_1.exists)(json, "message") ? undefined : json["message"],
    };
}
exports.EmbeddedTransferTransactionDTOFromJSONTyped = EmbeddedTransferTransactionDTOFromJSONTyped;
function EmbeddedTransferTransactionDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        signerPublicKey: value.signerPublicKey,
        version: value.version,
        network: (0, NetworkTypeEnum_1.NetworkTypeEnumToJSON)(value.network),
        type: value.type,
        recipientAddress: value.recipientAddress,
        mosaics: value.mosaics.map(UnresolvedMosaic_1.UnresolvedMosaicToJSON),
        message: value.message,
    };
}
exports.EmbeddedTransferTransactionDTOToJSON = EmbeddedTransferTransactionDTOToJSON;
