"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddedAddressAliasTransactionDTOToJSON = exports.EmbeddedAddressAliasTransactionDTOFromJSONTyped = exports.EmbeddedAddressAliasTransactionDTOFromJSON = exports.instanceOfEmbeddedAddressAliasTransactionDTO = void 0;
const AliasActionEnum_1 = require("./AliasActionEnum");
const NetworkTypeEnum_1 = require("./NetworkTypeEnum");
/**
 * Check if a given object implements the EmbeddedAddressAliasTransactionDTO interface.
 */
function instanceOfEmbeddedAddressAliasTransactionDTO(value) {
    let isInstance = true;
    isInstance = isInstance && "signerPublicKey" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "network" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "namespaceId" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "aliasAction" in value;
    return isInstance;
}
exports.instanceOfEmbeddedAddressAliasTransactionDTO = instanceOfEmbeddedAddressAliasTransactionDTO;
function EmbeddedAddressAliasTransactionDTOFromJSON(json) {
    return EmbeddedAddressAliasTransactionDTOFromJSONTyped(json, false);
}
exports.EmbeddedAddressAliasTransactionDTOFromJSON = EmbeddedAddressAliasTransactionDTOFromJSON;
function EmbeddedAddressAliasTransactionDTOFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'signerPublicKey': json['signerPublicKey'],
        'version': json['version'],
        'network': (0, NetworkTypeEnum_1.NetworkTypeEnumFromJSON)(json['network']),
        'type': json['type'],
        'namespaceId': json['namespaceId'],
        'address': json['address'],
        'aliasAction': (0, AliasActionEnum_1.AliasActionEnumFromJSON)(json['aliasAction']),
    };
}
exports.EmbeddedAddressAliasTransactionDTOFromJSONTyped = EmbeddedAddressAliasTransactionDTOFromJSONTyped;
function EmbeddedAddressAliasTransactionDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'signerPublicKey': value.signerPublicKey,
        'version': value.version,
        'network': (0, NetworkTypeEnum_1.NetworkTypeEnumToJSON)(value.network),
        'type': value.type,
        'namespaceId': value.namespaceId,
        'address': value.address,
        'aliasAction': (0, AliasActionEnum_1.AliasActionEnumToJSON)(value.aliasAction),
    };
}
exports.EmbeddedAddressAliasTransactionDTOToJSON = EmbeddedAddressAliasTransactionDTOToJSON;
